#!/usr/bin/env python
# -*- coding: utf-8 -*-

# stdlib imports
import argparse
from configobj import ConfigObj
import os
import sqlite3 as lite



if __name__ == '__main__':
    """
    Manually remove any "Currently running..." entries from the database
    """
    # See if there is a default path file, load in if there is and
    # replace any nones
    defaults = os.path.join(os.path.expanduser('~'), '.gfail_defaults')
    dbfile = None
    alerttype = 'value'

    if os.path.exists(defaults):
        D = ConfigObj(defaults)
        for key in D:
            if key == 'dbfile':
                dbfile = D[key]

    parser = argparse.ArgumentParser(
        description='Remove stalled runs from database',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '-d', '--database', metavar='database', nargs='?', default=dbfile,
        type=str, help=('Location of database'))

    pargs = parser.parse_args()
    db = pargs.database
    if db is None:
        raise Exception('No database file defined or found in defaults')
    
    connection = None
    connection = lite.connect(database)
    with connection:
        cursor = connection.cursor()
        # Check if "currently running" in note, if it is, we do want to rerun
        # because it didn't finish
        cursor.execute("SELECT id, note, eventcode, version FROM shakemap")
        lines = cursor.fetchall()
        for line in lines:
            id1, note1, eventid, ver = line
            if 'Currently running...' in note1:
                # Delete it from the table
                cursor.execute("DELETE FROM shakemap WHERE id = ?", (id1,))
                # Delete the version directory, if it exists
                verdirs = glob.glob(os.path.join(
                    config['output_filepath'], '%s*' % eventid,
                    'version.%03i' % ver))
                if len(verdirs) > 0:
                    for verd in verdirs:
                        shutil.rmtree(verd)

    # Delete any empty output directories (might have been left from failed
    # runs)
    for entry in os.scandir(config['output_filepath']):
        if entry.is_dir():
            files = glob.glob(os.path.join(entry.path, '*'))
            if len(files) == 0:
                shutil.rmtree(entry.path)


