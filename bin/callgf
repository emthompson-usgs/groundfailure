#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys
import logging
from configobj import ConfigObj

# third party imports
from impactutils.io.cmd import get_command_output
from mapio.shake import getHeaderData

# local imports
from gfail.pdl import transfer

# thresholds for running on event
EIS_THRESHOLD = 'yellow'
MAG_THRESHOLD = 6.5
MMI_THRESHOLD = 6

# what are the pager alert levels?
ALERTLEVELS = ['green', 'yellow', 'pending', 'orange', 'red']

# config file name, located in ~/.groundfailure
CONFIG_FILE = 'callgf.ini'

# gfail defaults file, which contains the default output directory
# TODO: move this to ~/.groundfailure as well
# currently in users home
DEFAULTS_FILE = '.gfail_defaults'


def check_groundfailure_thresholds(args, config):
    """
    This function checks for whether or not to run groundfailure based on
    magnitude, max MMI, and EIS.

    Args:
        args (argparse): Argparse object containing command line arguments.
        config (ConfigObj): Options set in ~/.gfail_defaults.

    Returns:
        bool: Should groundfailure be run?
    """
    # We could make this configurable but I think it is better to just
    # hav it hard coded for now.
    # mag_threshold = config['THRESHOLDS']['mag']
    # eis_threshold = config['THRESHOLDS']['eis']
    # mmi_threshold = config['THRESHOLDS']['mmi']
    mag_threshold = MAG_THRESHOLD
    eis_threshold = EIS_THRESHOLD
    mmi_threshold = MMI_THRESHOLD

    run_pager = False
    if args.magnitude >= mag_threshold:
        run_pager = True
    if args.maxmmi >= mmi_threshold:
        run_pager = True
    # Not clear to me what this is doing.... skip for now
    # if ALERTLEVELS.index(args.alertlevel) >= ALERTLEVELS.index(eis_threshold):
    #     run_pager = True

    return run_pager


def process_groundfailure(args, config):
    """
    Method that runs groundfailure.

    Args:
        args (argparse): Argparse object containing command line arguments.
        config (ConfigObj): Options set in ~/.gfail_defaults.
    """
    logging.info('######Event %s####\n' % args.code)
    logging.info('args%s\n\n' % str(args))
    if args.status == 'DELETE':
        # look at this with respect to archiving and sending cancel messages
        msg = 'No action to take with delete messages.'
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(1)

    logging.info('Checking if status is update...\n\n')
    if args.status != 'UPDATE':
        msg = 'No action to take with %s status.' % args.status
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(1)

    logging.info('Checking action...\n\n')
    if args.action not in ('EVENT_ADDED', 'EVENT_UPDATED',
                           'PRODUCT_ADDED', 'PRODUCT_UPDATED'):
        msg = 'No action to take with %s action.' % args.action
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(1)

    logging.info('Checking groundfailure property thresholds...\n\n')
    if not check_groundfailure_thresholds(args, config):
        msg = 'Input ShakeMap did not meet target thresholds.  Exiting.'
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(1)

    logging.info('Checking gridfile...\n\n')
    gridfile = os.path.join(args.directory, 'grid.xml')
    if not os.path.isfile(gridfile):
        msg = 'Could not find input ShakeMap grid file at %s.  Exiting.' % \
              gridfile
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(1)

    #
    # We've passed all the filters, so call gfail
    #

    # File containing list of model configs to include
    model_file = os.path.join(
        config['data_path'], 'autogf_models')

    # Need to find the ocean shapefile for timming, assume it is in
    # the data_path directory
    trim_file = os.path.join(
        config['data_path'], "gadm28", "gadm28.shp")

    # Run gfail
    cmd = "gfail %s %s --hdf5 -w -tr %s" % (
        model_file, gridfile, trim_file)
    res, stdout, stderr = get_command_output(cmd)
    if not res:
        print("gfail command failed.")
        sys.exit(1)

    # Find output directory
    out_lines = stdout.decode().split('\n')
    info_path = [l for l in out_lines if 'info.json' in l][0]
    out_dir = os.path.dirname(info_path)

    # Make overlay PNGs for website
    cmd = "create_png -e %s" % out_dir
    res, stdout, stderr = get_command_output(cmd)
    if not res:
        print("create_png command failed.")
        sys.exit(1)

    # Make info.json
    cmd = "create_info -e %s" % out_dir
    res, stdout, stderr = get_command_output(cmd)
    if not res:
        print("create_info command failed.")
        sys.exit(1)

    # Transfer
    pdl_conf_file = config['pdl_config']
    cmd = "gfail_transfer -e %s -c %s -d True" % (out_dir, pdl_conf_file)
    res, stdout, stderr = get_command_output(cmd)
    if not res:
        print("gfail_transfer command failed.")
        sys.exit(1)
    else:
        msg = 'Successful run.  Output returned: \n\n%s\n.' % stdout.decode()
        print(msg)
        logging.info(msg + '\n\n')
        sys.exit(0)


def read_shakemap(gridfile):
    """
    Read source information from shakemap grid.xml file.

    Args:
        gridfile (str): Path to shakemap grid.xml file.

    Returns:
        tuple: Source information, including
            - Event source code (str)
            - Event source time (datetime object)
            - Magnitude (float)
            - Latitude (float)
            - Longitude (float)
    """
    gdict, edict, gspec_dict, fdict, unc_dict = getHeaderData(gridfile)
    source = gdict['shakemap_originator']
    lat = edict['lat']
    lon = edict['lon']
    magnitude = edict['magnitude']
    time = edict['event_timestamp']
    return (source, time, magnitude, lat, lon)


def main(args, config):
    """
    callgf wrapper method.

    Args:
        args (argparse): Argparse object containing command line arguments.
        config (ConfigObj): Options set in ~/.gfail_defaults.
    """
    logfile = os.path.join(os.path.expanduser('~'), 'callgf.log')
    logging.basicConfig(filename=logfile, level=logging.DEBUG)
    logging.info('Arguments: "%s"' % str(args))
    if args.type == 'groundfailure':
        process_groundfailure(args, config)
    else:
        logging.info('Type is not "groundfailure", exiting.')
    sys.exit(0)


if __name__ == '__main__':
    desc = """Run groundfailure with arguments from PDL.
This program is meant to be called by a PDL process, and generally not
called by a user, unless that user is a developer debugging callpager itself.
"""
    argparser = argparse.ArgumentParser(
        description=desc,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    argparser.add_argument(
        "--directory",
        required=True,
        help='Directory where the shakemap grid.xml '
             'file data can be found',
        metavar='DIRECTORY')
    argparser.add_argument(
        "--type",
        required=True,
        help="Product type", metavar='TYPE')
    argparser.add_argument(
        "--status",
        required=True,
        help="Product status", metavar='STATUS')
    argparser.add_argument(
        "--code",
        help="Product code", metavar='CODE')
    argparser.add_argument(
        "--source",
        help="Product source", metavar='SOURCE')
    argparser.add_argument(
        '-d', '--debug', action='store_true',
        default=False, help='Run PAGER in debug mode')
    argparser.add_argument(
        "--action",
        help="Product action", metavar='ACTION')
    argparser.add_argument(
        "--preferred-latitude", type=float,
        help="Event latitude", metavar='LAT', dest='lat')
    argparser.add_argument(
        "--preferred-longitude", type=float,
        help="Event longitude", metavar='LON', dest='lon')
    argparser.add_argument(
        "--preferred-depth", type=float,
        help="Event depth", metavar='DEPTH', dest='depth')
    argparser.add_argument(
        "--preferred-magnitude", type=float,
        required=True,
        help="Event magnitude", metavar='MAG',
        dest='magnitude')
    argparser.add_argument(
        "--preferred-eventtime",
        help="Event time", metavar='TIME', dest='time')

    # get product properties
    argparser.add_argument("--property-maxmmi", dest="maxmmi", type=float,
                           required=True,
                           help="Maximum MMI")
    pargs, unknown = argparser.parse_known_args()

    # make sure the config file is where we expect it to be, and read it

    # NOTE: .groundfailure/callgf.ini' currently isn't used and probably
    # could be combined with .gfail_defaults, or maybe put them both in
    # the .groundfailure directory.

    # Read the gfail defaults file as well, get the output directory
    # I added a header: PATHS
    defaults_file = os.path.join(os.path.expanduser('~'), DEFAULTS_FILE)
    defaults = ConfigObj(defaults_file)

    # Merge... even though there's nothing in config right now...
    main(pargs, defaults)
