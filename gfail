#!/usr/bin/env python

#stdlib imports
import argparse
import os.path
import datetime
from configobj import ConfigObj

#third party imports
from mapio.shake import getHeaderData

#local imports
from groundfailure.conf import correct_config_filepaths
import groundfailure.logisticmodel as LM
from groundfailure.newmark import godt2008, classic, hazus
from groundfailure.savelayers import savelayers
from groundfailure.makemaps import parseConfigLayers, parseMapConfig, modelMap


def main(args):
    # NEED TO ADD CONFIG VALIDATION STEP THAT MAKES SURE ALL THE FILES EXIST

    # Figure out what models will be run
    if args.shakefile is not None:  # user intends to actually run some models
        # Make folder in outfolder for all results, if it doesn't already exist
        eventid = getHeaderData(args.shakefile)[0]['event_id']
        if args.save_models or args.make_static_plots or args.make_interactive_plots:
            if args.output_filepath is None:
                args.output_filepath = os.getcwd()
            outdir = os.path.join(args.output_filepath, eventid)
            if not os.path.exists(outdir):
                os.makedirs(outdir)

        if args.config_filepath is not None:
            args.config = os.path.join(args.config_filepath, args.config)
        try:
            # see if input is a single config file, put in a list for iteration
            temp = ConfigObj(args.config)
            if args.data_path is not None:
                temp = correct_config_filepaths(args.data_path, temp)
            configs = [temp]
            conffail = []
        except:
            #input is probably a list of config files, check
            f = open(args.config, 'r')
            configlist = f.readlines()
            configs = []
            conffail = []
            for conf in configlist:
                conf.replace('\n', '')
                conf = os.path.join(args.config_filepath, conf)
                try:
                    temp = ConfigObj(conf)
                    if args.data_path is not None:
                        temp = correct_config_filepaths(args.data_path, temp)
                    configs.append(temp)
                except:
                    conffail.append(conf)
        print('Running the following models:\n')
        for conf in configs:
            print('\t%s\n' % conf.keys()[0])
        if len(conffail) > 0:
            print('Could not find or read in the following config files:\n')
            for conf in conffail:
                print('\t%s\n' % conf)
            print('\nContinuing...\n')

        if args.set_bounds is not None:
            bounds = {'xmin': args.set_bounds[0], 'xmax': args.set_bounds[1], 'ymin': args.set_bounds[2],
                      'ymax': args.set_bounds[3]}
        else:
            bounds = None

        # Loop over config files
        for conf in configs:
            modelname = conf.keys()[0]
            print('Now running %s' % modelname)
            modelfunc = conf[modelname]['funcname']
            if modelfunc == 'LogisticModel':
                lm = LM.LogisticModel(args.shakefile, conf, uncertfile=args.uncertfile, saveinputs=args.save_inputs,
                                      bounds=bounds)
                maplayers = lm.calculate()
            elif modelfunc == 'hazus':
                maplayers = hazus(args.shakefile, conf, uncertfile=args.uncertfile, saveinputs=args.save_inputs,
                                  bounds=bounds)
            elif modelfunc == 'classic':
                maplayers = classic(args.shakefile, conf, uncertfile=args.uncertfile, saveinputs=args.save_inputs,
                                    bounds=bounds)
            elif modelfunc == 'godt2008':
                maplayers = godt2008(args.shakefile, conf, uncertfile=args.uncertfile, saveinputs=args.save_inputs,
                                     bounds=bounds)
            else:
                print(modelfunc)
                print('Unknown model function specified in config for %s model, skipping to next config' % modelfunc)
                continue
            time1 = datetime.datetime.utcnow().strftime('%d%b%Y_%H%M')
            filename = ('%s_%s_%s' % (eventid, modelname, time1))
            if args.save_models:
                filenameh = filename + 'hdf5'
                savelayers(maplayers, os.path.join(outdir, filenameh))

            if args.make_static_pdfs or args.make_static_pngs:
                plotorder, logscale, lims, colormaps, maskthreshes = parseConfigLayers(maplayers, conf)
                mapconfig = ConfigObj(args.mapconfig)
                kwargs = parseMapConfig(mapconfig, fileext=args.mapdata_filepath)
                modelMap(maplayers, args.shakefile, suptitle=conf[modelname]['shortref'], boundaries=bounds,
                         zthresh=0., lims=lims, maskthreshes=maskthreshes, maproads=True, mapcities=True,
                         savepdf=args.make_static_pdfs, savepng=args.make_static_pngs, printparam=True,
                         inventory_shapefile=None, outputdir=outdir, outfilename=filename, **kwargs)

            if args.make_interactive_plots:
                print('Interactive Plots not implemented yet\n')


if __name__ == '__main__':
    defaultConfigpath = os.path.join('/'.join(LM.__file__.split('/')[:-2]), 'defaultconfigfiles')
    parser = argparse.ArgumentParser(description='Run ground failure models on input ShakeMap grid.')
    parser.add_argument('config', metavar='config', nargs='?',
                        help='single config file of model to run, or text file listing config files')
    parser.add_argument('shakefile', nargs='?', help='single ShakeMap grid.xml file')
    parser.add_argument('-u', '--uncertfile', metavar='uncertfile', nargs='?', help='single ShakeMap uncertainty.xml file')
    parser.add_argument('-d', '--data-path', metavar='datafilepath', nargs='?',
                        help='Set file path to model input data (only needed if file paths in config are relative)')
    parser.add_argument('-o', '--output-filepath', metavar='outfilepath', nargs='?',
                        help='Filepath for output files, uses current directory if not specified')
    parser.add_argument('-c', '--config-filepath', metavar='configfilepath', nargs='?', default=defaultConfigpath,
                        help='Filepath where config files are located, default is defaultconfigfiles folder of groundfailure repository')
    parser.add_argument('-b', '--set-bounds', type=float, metavar=('xmin', 'xmax', 'ymin', 'ymax'), nargs=4,
                        help='Set bounds of model run using four floats in this order: xmin xmax ymin ymax,\
                              default uses shakemap bounds')
    parser.add_argument('-m', '--mapconfig', metavar='mapconfig', nargs='?', help='full file path to config file\
                        containing mapping options')
    parser.add_argument('-md', '--mapdata-filepath', metavar='mapdatapath', nargs='?', help='Set file path to mapping\
                        input data (only needed if file paths in mapconfig are relative)')

    # Binary
    parser.add_argument('-i', '--save-inputs', action='store_true', default=False,
                        help='Save input layer grids with model output')
    parser.add_argument('-s', '--save-models', action='store_true', default=False,
                        help='Save model results as MultiHazard HDF file (MapIO)')
    parser.add_argument('-pd', '--make-static-pdfs', action='store_true', default=False,
                        help='Make static plots for each model')
    parser.add_argument('-pn', '--make-static-pngs', action='store_true', default=False,
                        help='Make static plots for each model')
    parser.add_argument('-pi', '--make-interactive-plots', action='store_true', default=False,
                        help='Make interactive html plots for each model')
    #parser.add_argument('-e', '--exercise', action='store_true', default=False,
    #                    help='Exercise tests (for developers)')

    pargs = parser.parse_args()
    main(pargs)
