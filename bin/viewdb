#!/usr/bin/env python
# -*- coding: utf-8 -*-

# stdlib imports
import argparse
from configobj import ConfigObj
import os

# local imports
from gfail.utilities import view_database, alert_summary, plot_evolution


if __name__ == '__main__':
    """
    Code for easily getting information from the database of all ground failure
    events that have been run

    If run with no arguments, it will just print a summary of the database

    If .gfail_defaults defines the database file, it does not need to be
    defined with -db flag.

    Examples (assuming database filename is in .gfail_defaults):

        print most recent version of last 10 realtime events run, print full
            database without summary
            ```sh
            viewdb -r -c -n 10 --all -s
            ```

        show current version of last ten real time events with yellow or
            greater landslide hazard alert, print colors instead of alert
            levels
            ```sh
            viewdb -r -c -n 10 -p --LShazmin yellow
            ```

        make time evolution plots for just a few event ids
            ```sh
            viewdb -e us1000h3p4 us70006vll -s --timeplots
            ```

        print current version of all events greater than magnitude 7.5 and show
            alert colors instead of values
            ```sh
            viewdb -p -c --minmag 7.5 --color
            ```
    """
    # See if there is a default path file, load in if there is and
    # replace any nones
    defaults = os.path.join(os.path.expanduser('~'), '.gfail_defaults')
    dbfile = None
    alerttype = 'value'

    if os.path.exists(defaults):
        D = ConfigObj(defaults)
        for key in D:
            if key == 'dbfile':
                dbfile = D[key]

    parser = argparse.ArgumentParser(
        description='View ground failure database',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '-d', '--database', metavar='database', nargs='?', default=dbfile,
        type=str, help=('Location of database'))
    parser.add_argument(
        '-n', '--numevents', metavar='database', nargs='?', default=None,
        type=int, help=('Show only the n most recent ground failure runs'))
    parser.add_argument(
        '--starttime', metavar='starttime', nargs='?', default=None,
        help=('Start time of search as string in format recognizable'
              ' by np.datetime'), type=str)
    parser.add_argument(
        '--endtime', metavar='endtime', nargs='?', default=None,
        help=('End time of search as string in format recognizable'
              ' by np.datetime'), type=str)
    parser.add_argument(
        '-e', '--eventids', metavar='eventids', nargs='*',
        help=('Include specific event ids listed only (can be '
              'as many as wanted'))
    parser.add_argument(
        '--csvfile', metavar='csvfile', nargs='?', default=None, type=str,
        help='Filepath for csvfile to save containing subset of database '
             'that meets user defined search criteria')
    parser.add_argument(
        '--minmag', metavar='minmag', nargs='?', default=None, type=float,
        help='Minimum magnitude to include')
    parser.add_argument(
        '--maxmag', metavar='maxmag', nargs='?', default=None, type=float,
        help='Maximum magnitude to include')
    parser.add_argument(
        '--LShazmin', metavar='LShazmin', nargs='?',
        help='Minimum landslide hazard alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LShazmax', metavar='LShazmax', nargs='?',
        help='Maximum landslide hazard alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LQhazmin', metavar='LQhazmin', nargs='?',
        help='Min liquefaction hazard alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LQhazmax', metavar='LQhazmax', nargs='?',
        help='Max liquefaction hazard alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LSpopmin', metavar='LSpopmin', nargs='?',
        help='Min landslide population alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LSpopmax', metavar='LSpopmax', nargs='?',
        help='Max landslide population alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LQpopmin', metavar='LQpopmin', nargs='?',
        help='Min liquefaction population alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--LQpopmax', metavar='LQpopmax', nargs='?',
        help='Max liquefaction population alert level color (full word) or value',
        default=None)
    parser.add_argument(
        '--summaryplot', action='store_true',
        help='Make summary plot of current alert levels')
    parser.add_argument(
        '--timeplots', action='store_true',
        help='Make a plot showing run delay stats and a timeline plot showing '
        'evolution of events over time (will only show events that changed'
        ' alert level at least once unless eventids are specified)')

    # Boolean arguments

    parser.add_argument(
        '-r', '--realtime', action='store_true',
        help='Show only near-real-time events')
    parser.add_argument(
        '-c', '--currentonly', action='store_true',
        help='Show only the most recent run for each event id')
    parser.add_argument(
        '-p', '--printsuccess', action='store_true',
        help='Print out database entries of successful runs')
    parser.add_argument(
        '-f', '--printfailed', action='store_true',
        help='Print out database entries of failed runs')
    parser.add_argument(
        '--all', action='store_true',
        help='Print out all events including successful, failed, and '
             'any that did not meet ground failure criteria')
    parser.add_argument(
        '--color', action='store_true',
        help='report alert colors instead of values on database printouts')
    parser.add_argument(
        '-s', '--printsummary', action='store_false',
        help='Suppress printing of summary')
    parser.add_argument(
        '--summaryplotfile', nargs='?', type=str, metavar='file_extension',
        help='Save summaryplot to this location (include extension)',
        default=None)
    parser.add_argument(
        '--timeplotsfile', nargs='?', type=str, metavar='file_extension',
        help='Save timeplots to this location (include extension)',
        default=None)

    pargs = parser.parse_args()

    if pargs.summaryplot or pargs.summaryplotfile is not None:
        if pargs.summaryplotfile is not None:
            filebasename = pargs.summaryplotfile
        else:
            filebasename = None

        alert_summary(pargs.database, pargs.starttime, pargs.endtime,
                      pargs.minmag, pargs.maxmag, pargs.realtime,
                      pargs.currentonly, filebasename=filebasename,
                      summarytypes='overall')
    delattr(pargs, 'summaryplot')
    delattr(pargs, 'summaryplotfile')
    if pargs.timeplots or pargs.timeplotsfile is not None:
        if pargs.timeplotsfile is not None:
            filebasename = pargs.timeplotsfile
        else:
            filebasename = None
        if pargs.eventids is not None:
            changeonly = False
        else:
            changeonly = True
        plot_evolution(pargs.database, pargs.starttime, pargs.endtime,
                       pargs.minmag, pargs.maxmag, pargs.eventids,
                       filebasename=filebasename, changeonly=changeonly,
                       percrange=0.95)
    delattr(pargs, 'timeplots')
    delattr(pargs, 'timeplotsfile')

    if pargs.color:
        setattr(pargs, 'alertreport', 'color')
    delattr(pargs, 'color')

    if pargs.all:
        setattr(pargs, 'printnotmet', True)
        setattr(pargs, 'printfailed', True)
        setattr(pargs, 'printsuccess', True)
    delattr(pargs, 'all')

    view_database(**vars(pargs))
